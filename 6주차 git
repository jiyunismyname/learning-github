깃 git이란 무엇인가?
-> 리눅스 토르발스가 개발한 분산형 버전 관리 시스템/즉, 버전 컨트롤 시스템. 

깃이 필요한 이유
-> 버전을 수정하려면 여러 사람과 협력하고 수많은 수정을 해야하는데, 누가 무엇을 수정했는지 알기 힘들기
때문에 깃이 나옴

버전 체인지 방식
-> change vs snapshot: 체인지는 기존 데이터 위에 편집된 버전을 덮어씌우면서 버전을 바꾸지만 snapshont
은 나중에 한꺼번에 스샷 찍듯이 바뀜. 깃은 snapshot 방식이다. 

깃 작동방식
->distributed된 방식을 사용. 즉, 각 유저별로 자기 나름의 편집버전을 commint staged를 통해 고치다가, 필요해지면 각 유저별로 작업을 마친 버전을 
통합시켜 편집버전을 올림
->central 구조는 메인 서버가 다운되면 다 날라가서 취약함.

깃의 구조
1. working directory: 프로젝트의 현제 상태를 포함함. 파일수정이 이루어짐.
2. staging directory: 워킹 디렉토리에서 변경된 파일중에 저장하고자 하는 것을 선택하여 
이곳에 추가함.
3. repository: 2에서 추가된 파일들을 커밋, 버전 기록. 이 버전은 로컬 저장소에 기록된다고 한다.

-> 즉 워킹 디렉토리에서 편집하다가 마음에 들면 스테이징 디렉토리에 올림. 스테이징 디렉토리에서
심사를 통해 레파지토리에 최종적으로 커밋됨. 그러면 나중에 커밋된 버전을 전부 스냅샷 찍듯이 받아서 다시
각자 편집할 수 있음. 


git command

0. git config: 특정 사용자의 깃 환경을 구성하는데 사용되는 명령어. 글로벌, 시스템 로컬 차원이 있는데,
             글로벌의 경우 설정이 전역으로 적용되어 설정이 모든 깃저장소에서 사용된다는 뜻이고
             시스템의 경우 모든 시스템에서 사용되어 특정 관리자많이 사용할 수 있는 명령어이다. 
1. git init: 깃 저장소 초기화
             작업했던 디렉토리 안에서 실행. 그러면 작업한 디렉토리 뒤에 .git 파일이 추가됨. 
2. git add 파일이름: 워킹 디렉토리에서 스테이징 디렉토리로 파일 추가
                    이것을 통해 untracked files를 staging area 에 넣을 수 있음.
                    staging area에 올라간 파일을 수정했을 경우 다시 한번 써서 제목이 같은 두개의
                    다른 파일을 만들지 않도록 주의한다.
3. git commit -m "커밋 메세지": 스테이징 에리어의 변경사항을 레파지토리에 커밋
4. git status: 깃 작업 디렉토리의 현재 상태 확인. 뭐가 수정되었고, 어떤 파일이 스테이징에 있는지 알려줌
               ->untracked file 나옴. 이건 깃과 전혀 관련이 없는 파일.
5. nano words. txt: 나노 편집기를 이용해 words.txt 파일을 연다.  
6. git add.: 모든 untracked file를 staging area에 추가함.  
7. git rm-cached 파일이름: 스테이징의 파일제거, 작업 디렉토리에는 남겨두기
8. git commit -m "commit message": 스테이징의 영역의 변경내용을 로컬 레파지토리에 커밋함. 즉, 
새로운 버전을 만듬. git commit만 쳐도 됨. 그러나 뒤에 쓰는 것을 권장. commit이 뭐에 관한 내용인지 알려줌.
9. git log: commit한 모든 기록을 확인 가능
10. git branch: 브랜치 이름 확인
    git branch -m 바꾸기 전 이름 바꾸려는 이름: 브랜치 이름 바

***.gitignore을 디렉토리 안에다가 넣고 저장하면 git add. 명령어를 썼을때 .gitignore 이 저장된 파일은
   staging area에 올려지지 않음. 아예 없는취급해서 untrackted file에도 올라가 있지 않음. 응용가능
